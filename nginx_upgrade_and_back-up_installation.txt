**nginx相关配置设置含义
1.网站每秒连接并发数
~]# vim /usr/local/nginx/conf/nginx.conf
events {
    worker_connections  1024;	//每秒并发连接数
}
2.nginx与apache网站配置的迥异
1>httpd
<virtualhost *.80>	//监听端口:80
    ServerNanme www.example.com	//域名
    DocumentRoot /var/www/html	//指定网页存放的路径
</virtualhost>
2>nginx
    server{
	listen 80;	//监听端口:80
	server_name localhost;	//域名:localhost(本机),www.a.com

        location / {
  	    root html;	//nginx的网页路径，默认为nginx安装下的/usr/local/nginx/html
            index  index.html a.html;	//展示网站的首页内容，先寻找index.html,如果没有，则会寻找a.html，如果还没有，则会报网页错误:not found
        }
    }

3.nginx与apache多个域名的迥异
1>httpd
<virtualhost *.80>      //监听端口:80
    ServerNanme www.example.com //域名
    DocumentRoot /var/www/html  //指定网页存放的路径
</virtualhost>
<virtualhost *.80>      //监听端口:80
    ServerNanme www.case.com //域名
    DocumentRoot /var/www/html  //指定网页存放的路径
</virtualhost>
2>nginx
    server{
        listen 80;
        server_name www.example.com;
        location / {
            root html;
            index  index.html a.html;
        }
    server{
        listen 80;
        server_name www.case.com;
        location / {
            root html;
            index  index.html a.html;
        }

4.用户验证
调整nginx服务端配置实现web页面的用户验证,用户名为:qunxing,密码为:123456
~]# vim /usr/local/nginx/conf/nginx.conf
    server {
        listen       80;
        server_name  localhost;
        auth_basic "input username and password";
        auth_basic_user_file "/usr/local/nginx/namePasswd";	//路径要与创建的命令保证一致
        location /status {
                stub_status on;
        }
~]# yi httpd-tools	//装配置包
~]# htpasswd -c /usr/local/nginx/namePasswd qunxing	//配置用户名跟密码，-c选项为创建，不加则后续创建的用户不会覆盖之前的用户跟密码
New password: 
Re-type new password: 
Adding password for user qunxing
~]# nginx -s reload	//重新加载nginx服务
#firefox浏览器测试网页http://192.168.5.6

5.nginx服务增加一个web服务
~]# vim /usr/local/nginx/conf/nginx.conf
    server {
        listen       80;	//端口为nginx的服务端口
        server_name  www.qunxing.com;	//配置的域名

        location / {
            root   html;	//文件路径，想与localhost一致，则同一路径，也可新建路径www，推荐新建路径
            index  qunxing.html;	//www.qunxing.com的网站首页
        }
    }
~]# nginx -s reload	//重启服务
~]# vim /etc/hosts	//客户端一定对web服务进行域名解析(实验环境),生产环境则进行DNS解析
192.168.5.6 client www.qunxing.com

服务器应用
互联网公司网站标配:门户，电商，邮件，论坛
程序
进程
线程

**LNMP知识要点
*php-fpm配置文件详解
~]# vim /etc/php-fpm.d/www.conf
or
~]# grep -v "^$" /etc/php-fpm.d/www.conf | grep -v "^;"	//快速检索有效内容
[www]
listen = 127.0.0.1:9000	//PHP端口号
pm.max_children = 32	//最大进程数量，1个进程大致占20～30m内存，需考虑物理机的内存是否能够满足
pm.start_servers = 15		//最小进程数量
pm.min_spare_servers =  5	//最少需要几个空闲着的进程
pm.max_spare_servers = 32	//最多允许几个进程处于空闲状态
注释:nginx+web服务常见错误展示形式
1.nginx未启动			无法连接
2.php-fpm未启动			An Error ... ...
3.没有修改nginx.conf[动静分离]	下载
4.test.php没有			404 not found
5.test.php语法错误		空白
6.https,ftp://			协议错误

*地址重写
示例:
www.baidu.com----->https://www.baidu.com
www.360buy.com---->www.jd.com
/usr/local/nginx/html/xx.html删除--->index.html
~]# vim /usr/local/nginx/conf/nginx.conf
    server{
        listen 80; 
        server_name www.a.com;
        location / {
            root html;
            index  a.php;
        }
1.	rewrite /a.php /b.php;	//访问www.a.com/a.php网址调转到b.php网址，显示b.php的网页内容，当地址栏网址依然是:www.a.com/a.php
	#rewrite /a.php /b.php redirect;	//访问www.a.com/a.php网址调转到b.php网址，显示b.php的网页内容，当地址栏网址是新的:www.a.com/b.php
2.	rewrite ^/ http://www.baidu.com/;	//访问www.a.com网址调转到http://www.baidu.com/的网页
	rewrite ^/(.*) http://www.baidu.com/$1;	//访问www.a.com/(.*)网址调转到http://www.baidu.com/(.*)的网页,注意:nginx的正则匹配表现形式为$1,而不是像shell的正则表现形式\1
3.	#宽窄屏的切换
	/usr/local/nginx/html/test.html
	内容:宽屏
	/usr/local/nginx/html/mini/test.html
	内容:窄屏
	if ($http_user_agent ~* android) {
	    rewrite ^/(.*) /mini/$1;
	}
    }

**配置nginx服务器，添加服务器池，实现反向代理功能
*修改/usr/local/nginx/conf/nginx.conf配置文件

... ...
http {
... ...
##配置upstream定义后端服务器集群
##配置upstream服务器集群池属性:weight,max_fails,fail_timeout,down
##配置upstream服务器集群的调度算法:ip_hash
#使用upstream定义后端服务器集群，集群名称任意(如webserver)
#使用server定义集群中的具体服务器和端口，weight设置服务器权重值，默认为1，max_fails设置最大失败次数，fail_timeout设置失败超时时间，单位为秒，down标记服务器已关机，不参与集群调度
#通过ip_hash设置调度规则为:相同客户端访问相同服务器
]# vim /usr/local/nginx/conf/nginx.conf
    upstream webserver {
	ip_hash;
        server 192.168.3.222:80 weight=1 max_fails=1 fail_timeout=30;
        server 192.168.3.244:80 weight=2 max_fails=2 fail_timeout=30;
	server 192.168.3.234:80 down;
    }
    server {
        listen       80;
        server_name  localhost;
        location /status {
            stub_status on;
	}
        location / {
#通过proxy_pass将用户的请求转发给webserver集群
            proxy_pass http://webserver;
            root   html;
            index  index.html index.htm;
        }
}
]# nginx -s reload

**Nginx的TCP/UDP调度器
*需要安装监控模块/4层反向代理功能:stream，它支持4层TCP/UDP代理的Nginx服务器
*配置Nginx服务器，添加服务器池，实现TCP/UDP反向代理功能
]# vim /usr/local/nginx/conf/nginx.conf
stream {
    upstream backend {			//backend服务器池
        server 192.168.3.222:22;	//后端SSH服务器的IP和端口
        server 192.168.3.244:22;
    }
    server {
        listen 12345;			//Nginx监听的端口
        proxy_connect_timeout 1s;	
        proxy_timeout 3s;		//远程连接持续3s会自动断开
        proxy_pass backend;
    }
}
#注释:此stream代码不能在http配置内，独属于另一个端口服务22，不属于http/80服务,需要独自配置
]# nginx -s reload
]# ssh -p 12345 192.168.5.7	//客户端测试远程连接，可直接进入到web服务器






