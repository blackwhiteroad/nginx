**nginx相关配置设置含义
1.网站每秒连接并发数
~]# vim /usr/local/nginx/conf/nginx.conf
events {
    worker_connections  1024;	//每秒并发连接数
}
2.nginx与apache网站配置的迥异
1>httpd
<virtualhost *.80>	//监听端口:80
    ServerNanme www.example.com	//域名
    DocumentRoot /var/www/html	//指定网页存放的路径
</virtualhost>
2>nginx
    server{
	listen 80;	//监听端口:80
	server_name localhost;	//域名:localhost(本机),www.a.com

        location / {
  	    root html;	//nginx的网页路径，默认为nginx安装下的/usr/local/nginx/html
            index  index.html a.html;	//展示网站的首页内容，先寻找index.html,如果没有，则会寻找a.html，如果还没有，则会报网页错误:not found
        }
    }

3.nginx与apache多个域名的迥异
1>httpd
<virtualhost *.80>      //监听端口:80
    ServerNanme www.example.com //域名
    DocumentRoot /var/www/html  //指定网页存放的路径
</virtualhost>
<virtualhost *.80>      //监听端口:80
    ServerNanme www.case.com //域名
    DocumentRoot /var/www/html  //指定网页存放的路径
</virtualhost>
2>nginx
    server{
        listen 80;
        server_name www.example.com;
        location / {
            root html;
            index  index.html a.html;
        }
    server{
        listen 80;
        server_name www.case.com;
        location / {
            root html;
            index  index.html a.html;
        }

4.用户验证
调整nginx服务端配置实现web页面的用户验证,用户名为:qunxing,密码为:123456
~]# vim /usr/local/nginx/conf/nginx.conf
    server {
        listen       80;
        server_name  localhost;
        auth_basic "input username and password";
        auth_basic_user_file "/usr/local/nginx/namePasswd";	//路径要与创建的命令保证一致
        location /status {
                stub_status on;
        }
~]# yi httpd-tools	//装配置包
~]# htpasswd -c /usr/local/nginx/namePasswd qunxing	//配置用户名跟密码，-c选项为创建，不加则后续创建的用户不会覆盖之前的用户跟密码
New password: 
Re-type new password: 
Adding password for user qunxing
~]# nginx -s reload	//重新加载nginx服务
#firefox浏览器测试网页http://192.168.5.6

5.nginx服务增加一个web服务
~]# vim /usr/local/nginx/conf/nginx.conf
    server {
        listen       80;	//端口为nginx的服务端口
        server_name  www.qunxing.com;	//配置的域名

        location / {
            root   html;	//文件路径，想与localhost一致，则同一路径，也可新建路径www，推荐新建路径
            index  qunxing.html;	//www.qunxing.com的网站首页
        }
    }
~]# nginx -s reload	//重启服务
~]# vim /etc/hosts	//客户端一定对web服务进行域名解析(实验环境),生产环境则进行DNS解析
192.168.5.6 client www.qunxing.com

服务器应用
互联网公司网站标配:门户，电商，邮件，论坛
程序
进程
线程

**LNMP知识要点
*php-fpm配置文件详解
~]# vim /etc/php-fpm.d/www.conf
or
~]# grep -v "^$" /etc/php-fpm.d/www.conf | grep -v "^;"	//快速检索有效内容
[www]
listen = 127.0.0.1:9000	//PHP端口号
pm.max_children = 32	//最大进程数量，1个进程大致占20～30m内存，需考虑物理机的内存是否能够满足
pm.start_servers = 15		//最小进程数量
pm.min_spare_servers =  5	//最少需要几个空闲着的进程
pm.max_spare_servers = 32	//最多允许几个进程处于空闲状态
注释:nginx+web服务常见错误展示形式
1.nginx未启动			无法连接
2.php-fpm未启动			An Error ... ...
3.没有修改nginx.conf[动静分离]	下载
4.test.php没有			404 not found
5.test.php语法错误		空白
6.https,ftp://			协议错误

*地址重写
示例:
www.baidu.com----->https://www.baidu.com
www.360buy.com---->www.jd.com
/usr/local/nginx/html/xx.html删除--->index.html
~]# vim /usr/local/nginx/conf/nginx.conf
    server{
        listen 80; 
        server_name www.a.com;
        location / {
            root html;
            index  a.php;
        }
1.	rewrite /a.php /b.php;	//访问www.a.com/a.php网址调转到b.php网址，显示b.php的网页内容，当地址栏网址依然是:www.a.com/a.php
	#rewrite /a.php /b.php redirect;	//访问www.a.com/a.php网址调转到b.php网址，显示b.php的网页内容，当地址栏网址是新的:www.a.com/b.php
2.	rewrite ^/ http://www.baidu.com/;	//访问www.a.com网址调转到http://www.baidu.com/的网页
	rewrite ^/(.*) http://www.baidu.com/$1;	//访问www.a.com/(.*)网址调转到http://www.baidu.com/(.*)的网页,注意:nginx的正则匹配表现形式为$1,而不是像shell的正则表现形式\1
3.	#宽窄屏的切换
	/usr/local/nginx/html/test.html
	内容:宽屏
	/usr/local/nginx/html/mini/test.html
	内容:窄屏
	if ($http_user_agent ~* android) {
	    rewrite ^/(.*) /mini/$1;
	}
    }

**配置nginx服务器，添加服务器池，实现反向代理功能
*修改/usr/local/nginx/conf/nginx.conf配置文件

... ...
http {
... ...
##配置upstream定义后端服务器集群
##配置upstream服务器集群池属性:weight,max_fails,fail_timeout,down
##配置upstream服务器集群的调度算法:ip_hash
#使用upstream定义后端服务器集群，集群名称任意(如webserver)
#使用server定义集群中的具体服务器和端口，weight设置服务器权重值，默认为1，max_fails设置最大失败次数，fail_timeout设置失败超时时间，单位为秒，down标记服务器已关机，不参与集群调度
#通过ip_hash设置调度规则为:相同客户端访问相同服务器
]# vim /usr/local/nginx/conf/nginx.conf
    upstream webserver {
	ip_hash;
        server 192.168.3.222:80 weight=1 max_fails=1 fail_timeout=30;
        server 192.168.3.244:80 weight=2 max_fails=2 fail_timeout=30;
	server 192.168.3.234:80 down;
    }
    server {
        listen       80;
        server_name  localhost;
        location /status {
            stub_status on;
	}
        location / {
#通过proxy_pass将用户的请求转发给webserver集群
            proxy_pass http://webserver;
            root   html;
            index  index.html index.htm;
        }
}
]# nginx -s reload

**Nginx的TCP/UDP调度器
*需要安装监控模块/4层反向代理功能:stream，它支持4层TCP/UDP代理的Nginx服务器
*配置Nginx服务器，添加服务器池，实现TCP/UDP反向代理功能
]# vim /usr/local/nginx/conf/nginx.conf
stream {
    upstream backend {			//backend服务器池
        server 192.168.3.222:22;	//后端SSH服务器的IP和端口
        server 192.168.3.244:22;
    }
    server {
        listen 12345;			//Nginx监听的端口
        proxy_connect_timeout 1s;	
        proxy_timeout 3s;		//远程连接持续3s会自动断开
        proxy_pass backend;
    }
}
#注释:此stream代码不能在http配置内，独属于另一个端口服务22，不属于http/80服务,需要独自配置
]# nginx -s reload
]# ssh -p 12345 192.168.5.7	//客户端测试远程连接，可直接进入到web服务器

**查看nginx调度器状态页面
]# vim /usr/local/nginx/conf/nginx.conf
... ...
    server {
        listen       80;
        server_name  localhost;
        location /status {
            stub_status on;
	    #allow IP地址;	//生产环境一般写本机地址
	    #deny IP地址;	//生产环境一般写禁止地址
        }
	... ...
}
... ...
]# nginx -s reload
]# curl http://192.168.5.7/status
Active connections: 1 
server accepts handled requests
 3851 3851 1107 
Reading: 0 Writing: 1 Waiting: 0
参数详解:
Active connections:当前活动的连接数量
accepts:已经接受客户端的连接总数量
handled:已经处理客户端的连接总数量(一般与accepts一致,除非服务器限制了连接数量)
requests:客户端发送的请求数量
Reading:当前服务器正在读取客户端请求头的数量
Writing:当前服务器正在写响应信息的数量
Waiting:当前多少客户端在等待服务器的响应

**优化nginx并发量
注释:nginx的理论并发量5w,实际生产环境中，动态至多达到几千的并发量，静态可达到万把的并发量
*优化前配置
]# yum -y install httpd-tools //安装测试包
]# ab -c 2000 -n 2000 http://192.168.5.7/
... ...
socket: Too many open files (24)	//提示打开文件数量过多
*修改Nginx配置文件，增加并发量
]# vim /usr/local/nginx/conf/nginx.conf
... ...
worker_processes  2;		//与CPU核心数量一致
events {
    worker_connections  65535;	//每个worker最大并发连接数
    use epoll;	//epoll是Linux内核为处理大批量文件描述符而作了改进的poll，是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。
}
]# nginx -s reload
*优化linux内核参数(最大文件数量)
]# ulimit -a		//查看所有属性值
]# ulimit -Hn 100000	//设置硬限制(临时规则)
]# ulimit -Sn 100000	//设置软限制(临时规则)
#永久设置有效
]# vim /etc/security/limits.conf
#<domain>      <type>  <item>         <value>
*               soft    nofile          100000
*               hard    nofile          100000
参数分4列详解如下:
#用户或组	硬限制或软限制	需要限制的项目	限制的值
]# ab -c 11000 -n 11000 http://192.168.5.7/
... ...
100%   4027 (longest request)

*优化nginx数据包头缓存
#优化前，使用脚本测试长头部请求是否能获得响应
]# vim buffer.sh
#!/bin/bash
URL=http://192.168.5.7/index.html?
for i in {1..5000}
do
	URL=${URL}v$i=$i
done
curl $URL
#客户端测试
~]# sh buffer.sh
... ...
<head><title>414 Request-URI Too Large</title></head>
... ...
#修改nginx配置文件，增加数据包头部缓存大小
]# vim /usr/local/nginx/conf/nginx.conf
http {
... ...
    client_header_buffer_size   1k;	//默认请求包头信息的缓存
    large_client_header_buffers 4 4m;	//大请求包头信息的缓存个数与容量
... ...
}
#客户端测试
~]# sh buffer.sh
... ...
<h1>Welcome to nginx!</h1>
... ...

*修改nginx配置文件，定义对静态页面的缓存时间
]# vim /usr/local/nginx/conf/nginx.conf
http {
... ...
        location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
            expires     30d;	//定义客户端缓存时间为30天
        }
... ...
}
]# nginx -s reload
#客户端测试
]# firefox http://192.168.5.7/day.jpg

*自动完成日志切割功能	//重点
每周5的03点03分自动执行脚本完成日志切割工作
]# vim /usr/local/nginx/logbak.sh
#!/bin/bash
date=`date +%Y%m%d`
logpath=/usr/local/nginx/logs
mv $logpath/access.log $logpath/access-$date.log
mv $logpath/error.log $logpath/error-$date.log
kill -USR1 $(cat $logpath/nginx.pid)
]# chmod +x /usr/local/nginx/logbak.sh	//务必要授予执行权限，否则其它用户米有此权限，导致自动定时不了任务
]# crontab -e
03 03 * * 5 /usr/local/nginx/logbak.sh

*对页面进行压缩处理
#修改nginx配置文件
]# vim /usr/local/nginx/conf/nginx.conf
http {
... ...
    gzip  on;			//开启压缩功能
    gzip_min_length 1000;	//小文件不压缩
    gzip_comp_level 4;		//压缩比率，4为最佳
    gzip_types text/plain text/css application/json application/x-javascript t
ext/xml application/xml application/xml+rss text/javascript;	//对特定文件压缩，类型参考/usr/local/nginx/conf/mime.types
... ...
}
]# nginx -s reload

*服务器内存缓存
]# vim /usr/local/nginx/conf/nginx.conf
http {
... ...
    #设置服务器最大缓存2000个文件句柄，关闭20秒内无请求的文件句柄
    open_file_cache     max=2000        inactive=20s;
    #文件句柄的有效时间是60s，60s后过期
    open_file_cache_valid       60s;
    #只有访问次数超过5次会被缓存
    open_file_cache_min_uses    5;
    open_file_cache_errors      off;
... ... 
}
]# nginx -s reload




























